!
! Quagga sample configuration file
!
hostname myrouter
password verysecret
enable password yourwishismycommand
!
router ospf
    ! OSPF is only active on links with an IP in this subnet.
    ! No need to specifically disable it on the external interface
    network 10.1.0.0/16 area 0
    ! External routing information is distributed through the internal network
    redistribute bgp
    redistribute connected

router bgp 64601
    ! The router resides in the LAN of an Internet exchange with subnet 172.16.0.0/12
    bgp router-id 172.16.0.1
    network 10.1.0.0/16
    ! We announce our full /16 range. 
    ! We don't redistribute ODPF information, since that would announce individual /24 ranges.
    
    ! define three groups of connections: upstream providers, peers, and customers
    ! define route maps to filter incoming and outcoming route announcements
    ! next-hop-self ensures that transit traffic really goes through our router, 
    ! even if the source and destination can reach each other (such as in a LAN)
    ! use route-map, filter-list, prefix-list or distribute-list to set filters.
    neighbor UPSTREAM peer-group
    neighbor UPSTREAM route-map RM-UPSTREAM-IN  in
    neighbor UPSTREAM route-map RM-PROVIDER-OUT out
    neighbor UPSTREAM next-hop-self
    neighbor PEER     peer-group
    neighbor PEER     route-map RM-PEER-IN  in
    neighbor PEER     route-map RM-PROVIDER-OUT out
    neighbor PEER     next-hop-self
    neighbor CUSTOMER peer-group
    neighbor CUSTOMER route-map RM-CUSTOMER-IN  in
    neighbor CUSTOMER next-hop-self
    
    ! Internal neighbours (iBGP)
    neighbor 10.1.45.1 remote-as 64601
    neighbor 10.1.45.1 description router 45
    
    ! upstream provider
    neighbor 172.16.0.112 remote-as 64712
    neighbor 172.16.0.112 peer-group UPSTREAM
    neighbor 172.16.0.112 description Transit Provider AS 64712
    
    ! peer
    neighbor 172.16.2.38 remote-as 65312
    neighbor 172.16.2.38 peer-group PEER
    neighbor 172.16.2.38 description Peer AS 65312
    
    ! client
    neighbor 172.16.8.1 remote-as 64801
    neighbor 172.16.8.1 peer-group CUSTOMER
    neighbor 172.16.8.1 description Client AS 64801


! Local Preferences:
! We prefer traffic via customers (thay pay for it), otherwise via peers, 
! and via providers only as a last resort (since we pay for that)
! 75  custom (lowered) preference, may be configured by customers, peers or providers using community 2075
! 80  providers (low preference)
! 85  custom (lowered) preference, may be configured by customers or peers using community 2085
! 90  peers (medium preference)
! 95  custom (lowered) preference, may be configured by customers using community 2095
! 100 customers (high preferences)

! Communities:
! We allow neighbours to announce routing entries to use with a community value that signifies 
! that it is a low-preference route. This can be useful for backup connections which are not 
! to be used unless there really is no other option. We never allow neighbours to set a higher 
! preference: that is something we decide upon. The reason we graciously allow lower preferences 
! is that we rather receive announcements with low preference than no announcement at all.
! 64601:2075  (as sent by others): request to set local preference to 75
! 64601:2085  (as sent by others): request to set local preference to 85
! 64601:2095  (as sent by others): request to set local preference to 95
!
! 64601:3080  (set by ourself): announcement learnt from upstream provider
! 64601:3090  (set by ourself): announcement learnt from peer
! 64601:3100  (set by ourself): announcement learnt from customer
! (note: our own routes have no community set)

! FILTERS (implemented using route maps)

! BUG ALERT: "on-match next" does not work for Zebra 0.94. 
! This is fixed in Quagga 0.98.6, and likely earlier.
! This means that the route map entries that modify the local prefence
! based on a request by the neighbour are never executed.

! Route map for upstream providers. 
! Block bogon IPs, make entry as coming from upstream using community 3080, and
! set low local-preference
! optionally allow the neighbour to lower to local preference even more (to 75)
route-map RM-UPSTREAM-IN deny 10
    match ip address prefix-list private-ip
route-map RM-UPSTREAM-IN permit 20
    set community 64601:3080 additive
    set local-preference 80
    on-match next
route-map RM-UPSTREAM-IN permit 30
    match community localpref75
    set local-preference 75
route-map RM-UPSTREAM-IN permit 40

! Route map for peers.
! Block bogon IPs, make entry as coming from upstream using community 3090, and 
! set medium local-preference
! optionally allow peers to lower to local preference (to 75 or 85)
route-map RM-PEER-IN deny 10
    match ip address prefix-list private-ip
route-map RM-PEER-IN permit 20
    set community 64601:3090 additive
    set local-preference 90
    on-match next
route-map RM-PEER-IN permit 30
    match community localpref75
    set local-preference 75
route-map RM-PEER-IN permit 40
    match community localpref85
    set local-preference 85
route-map RM-PEER-IN permit 50

! Outgoing filters for peers and transit providers
! Filter routes from other peers (we don't provide transit for them), only announce 
! our own routes and customer routes.
route-map RM-PROVIDER-OUT deny 10
    ! filter out route entries learnt from peers and upstream providers
    match community providers
    ! todo: remove the 3XXX communities in outgoing filters. Those are private, and not of anyone else's business.
route-map RM-PROVIDER-OUT permit 20
    ! empty route map entry, make sure all non-matching entries pass this filter

! Route map for customers.
! Block bogon IPs, make entry as coming from upstream using community 3100, and 
! set a high local-preference
! optionally allow peers to lower to local preference (to 75, 85 or 95)
route-map RM-CUSTOMER-IN deny 10
    match ip address prefix-list private-ip
route-map RM-CUSTOMER-IN permit 20
    set community 64601:3100 additive
    set local-preference 100
    on-match next
route-map RM-CUSTOMER-IN permit 30
    match community localpref75
    set local-preference 75
route-map RM-CUSTOMER-IN permit 40
    match community localpref85
    set local-preference 85
route-map RM-CUSTOMER-IN permit 50
    match community localpref95
    set local-preference 95
route-map RM-CUSTOMER-IN permit 60

! community list matching route entries learnt from peers and upstream providers
ip community-list standard providers permit 64601:3080
ip community-list standard providers permit 64601:3090
ip community-list standard providers deny

! community list matching lower preference requests
ip community-list standard localpref75 permit 64644:2075
ip community-list standard localpref85 permit 64644:2085
ip community-list standard localpref95 permit 64644:2095

! For backup connections to a provider, you may create the following route-maps,
! provided that that provider has a similar community that allows neighbours to 
! set the local preference.
! The following example is specific if AS 64715 is the provider of the backup connection.
! Incoming route map: Set local preference to a low 75.
route-map RM-BACKUP-PROVIDER-IN permit 10
    ! apply regular route map for upstream providers
    ! Calling other route maps requires Quagga 0.96.5 or higher.
    call RM-UPSTREAM-IN
    on-match next
route-map RM-BACKUP-PROVIDER-IN permit 20
    ! lower local-preference from 80 to 75 for backup connections
    set local-preference 75

! Outcoming route map for backup connections
! Ask peer to set their local preference to a low 75.
route-map RM-BACKUP-PROVIDER-OUT deny 10
    ! apply regular route map for upstream providers
    call RM-PROVIDER-OUT
    on-match next
route-map RM-BACKUP-PROVIDER-OUT permit 20
    ! set community that asks AS 64715 to use a lower preference.
    ! communities are send, but since we don't add but replace the community here,
    ! private communities such as 3XXX are never announced to neighbors.
    set community 64715:2075

! Prefix list matching private IP ranges, bogons, and other suspicious IP range announcements.
! Any 'permit' here is a match (not really a 'permit') which is BLOCKED in incoming route map.
! Note: The le 32 also filters subnets of these bogon ranges. However, neigbours can still 
! announce a large supernet which contains a bogon range (e.g. 169.254.0.0/15). So you likely 
! want to do additional per-neighbour filtering, or peer with known bogon black hole servers.
ip prefix-list private-ip description Private ranges, large or small IP ranges
ip prefix-list private-ip permit 0.0.0.0/8 le 32
! no filtering on 10.0.0.0 range for demo network
!ip prefix-list private-ip permit 10.0.0.0/8 le 32
ip prefix-list private-ip permit 127.0.0.0/8 le 32
ip prefix-list private-ip permit 169.254.0.0/16 le 32
ip prefix-list private-ip permit 172.16.0.0/12 le 32
ip prefix-list private-ip permit 192.0.2.0/24 le 32
ip prefix-list private-ip permit 192.168.0.0/16 le 32
ip prefix-list private-ip permit 240.0.0.0/4 le 32
!ip prefix-list private-ip permit 0.0.0.0/0 le 7 le 32
! stricter filtering on prefix sizes for demo network
ip prefix-list private-ip permit 0.0.0.0/0 le 14
ip prefix-list private-ip permit 0.0.0.0/0 ge 25
ip prefix-list private-ip deny any
!
